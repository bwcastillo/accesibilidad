load("~/Rwork/Accesibilidad/Raw_Data/.RData")
View(zz)
View(tmp)
for (i in seq(KMZs)){
zz[[i]]<- getKMLcoordinates(paste0("C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/kml/8/",KMZs[i]), ignoreAltitude = T)
zz[[i]] <- do.call(rbind, zz[[i]])
colnames(zz[[i]]) <- c("lon", "lat")
if (class(zz[[i]]) == "matrix" | length(zz) == 1) {print(KMZs[i]);next()}
tmp <- do.call(rbind, zz[[i]])
colnameszz[[i]] <- c("lon", "lat")
LonLat <- rbind(LonLat, zz[[i]])
}
tmp <- getKMLcoordinates(paste0("C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/kml/8/",KMZs[i]), ignoreAltitude = T)
tmp <- do.call(rbind, tmp)
colnames(tmp) <- c("lon", "lat")
LonLat <- rbind(LonLat, tmp) #LON LAT Aquí a que objeto referencia?
library(rvest)
library(stringr)
library(RCurl)
library(rgdal)
library(maptools)
for (i in seq(KMZs)){
zz[[i]]<- getKMLcoordinates(paste0("C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/kml/8/",KMZs[i]), ignoreAltitude = T)
zz[[i]] <- do.call(rbind, zz[[i]])
colnames(zz[[i]]) <- c("lon", "lat")
if (class(zz[[i]]) == "matrix" | length(zz) == 1) {print(KMZs[i]);next()}
tmp <- do.call(rbind, zz[[i]])
colnameszz[[i]] <- c("lon", "lat")
LonLat <- rbind(LonLat, zz[[i]])
}
tmp <- getKMLcoordinates(paste0("C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/kml/8/",KMZs[i]), ignoreAltitude = T)
tmp <- do.call(rbind, tmp)
colnames(tmp) <- c("lon", "lat")
LonLat <- rbind(LonLat, tmp) #LON LAT Aquí a que objeto referencia?
From_Kmz_to_Shp_Points <- function(KMZs, folder, dest, name_output){
LonLat <- data.frame()
for (i in seq(KMZs)){
tryCatch(tmp <- getKMLcoordinates(paste0("kml/",folder,"/", KMZs[i]), ignoreAltitude = T), error = function(x){print(KMZs[i]); tmp <- NA})
if (class(tmp) == "matrix" | length(tmp) == 1) {print(KMZs[i]);next()}
tmp <- do.call(rbind, tmp)
colnames(tmp) <- c("lon", "lat")
LonLat <- rbind(LonLat, tmp)
}
LonLat <- LonLat[!is.na(LonLat$lon),]
sp <- SpatialPointsDataFrame(LonLat, LonLat)
writeOGR(sp, dest, name_output, "ESRI Shapefile", overwrite_layer = T)
return(data.frame(LonLat, Ciudad = folder))
}
setwd("C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/")
tabla <- data.frame()
for (r in seq(list.files("kml"))){
folder <- list.files("kml")[r]
KMZs <- list.files(path= paste0("kml/",folder), pattern="*.kmz", full.names=FALSE)
tablita <-  From_Kmz_to_Shp_Points(KMZs, folder,
dest = "C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/Shapefiles",
paste0("Ferias_", folder))
tabla <- rbind(tabla, tablita)
}
View(tabla)
View(tablita)
Consulta_OTP <- function(coordinates, viaje.tiempo = 10, viaje.velocidad = 1.38,
mode = "WALK", outputgeom = "SHED",
otp_rest_url='http://otp.cedeus.cl/'){
# Para no saturar el servidor, se realiza una consulta cada .33 segundos, o 3 consultas por segundo.
# Sys.sleep(.1)
# Crear la URL para extraer el walkshed
consulta.parametros = paste('isochroneOld?fromPlace=', coordinates, '&walkTime=',
viaje.tiempo, '&walkSpeed=', viaje.velocidad,'&mode=',
mode, '&toPlace=-33.5846161,-70.5410151&output=',
outputgeom, sep = "")
consulta.url <- paste(otp_rest_url, consulta.parametros, sep  = "") #Ref:Línea 6
# Extraer el walkshed, el cual viene en formato GeoJSON
print(consulta.url)
walkshed.texto <- getURL(consulta.url) #Ref:Línea 15
# Contador que define el n?mero de veces que se debe intentar una consulta cuando se encuentran
# geometr?as incorrectas.
counter <- 0
# Loop "while". Si el walkshed contiene las palabras "LineString" o "504 Gateway Time-out"
# el request vuelve a ejecutarse hasta 5 veces, con 10 segundos entre cada interaci?n del request.
while((grepl("LineString", walkshed.texto) |
grepl("504 Gateway Time-out", walkshed.texto)) &
counter <= 20){
print("Resultado inv?lido. Solicitando de nuevo.")
Sys.sleep(.5)
walkshed.texto <- getURL(consulta.url)
counter <- counter + 1
}
walkshed.polygon <- readOGR(walkshed.texto, "OGRGeoJSON", verbose = F, p4s = "+proj=longlat +datum=WGS84")
return(walkshed.polygon)
}
Consultor_otp <- function(data, viaje.tiempo = 10, viaje.velocidad = 1.38, mode = "WALK"){
lista.tmp <- list()
for (i in seq(data)){
print(paste("Request number:", i))
tmp <- Consulta_OTP(data[i])
if (class(tmp) == "SpatialLinesDataFrame") { print("linestring"); next() }
lista.tmp <- append(lista.tmp, tmp)
}
shp.output <- do.call(bind,lista.tmp)
return(shp.output)
}
accesibilidad_tabla <- data.frame()
for (c in unique(tabla$Ciudad)){
tabla.ciudad <- tabla[tabla$Ciudad == c,]
shp.name <- paste0(c, "_Walksheds")
if (!file.exists(paste("../Output/Walksheds/", shp.name, ".shp",sep = ""))){
coords <- paste(tabla.ciudad[,2], tabla.ciudad[,1], sep = ",")
walkshed.shp <- Consultor_otp(coords)
print("writing shp")
writeOGR(walkshed.shp, "../Output/Walksheds", shp.name, driver = "ESRI Shapefile", overwrite_layer = T)
} else {
walkshed.shp <- readOGR("../Output/Walksheds", shp.name)
}
poblacion_manzanas.shp <- readOGR("../Raw_Data/Poblacion_Manzanas_Ciudades", paste0(c, "_Poblacion_Manzanas"), encoding = "UTF-8")
walkshed.shp <- spTransform(walkshed.shp, proj4string(poblacion_manzanas.shp))
# Los walksheds que tienen contacto con una manzana
manzanas.subset <- poblacion_manzanas.shp[walkshed.shp,]
# Identificar las manzanas con acceso seg?n ID, las que no tienen acceso, y exportar a shp
accesibilidad.shp <- poblacion_manzanas.shp[,c("ID_W", "Pob")]
accesibilidad.shp@data$Acceso <- "Dummy"
accesibilidad.shp@data[accesibilidad.shp@data$ID_W %in%
manzanas.subset@data$ID,]$Acceso <- "S?"
accesibilidad.shp@data[!(accesibilidad.shp@data$ID_W %in%
manzanas.subset@data$ID),]$Acceso <- "No"
accesibilidad.carpeta <- paste("../Output/Accesibilidad", sep = "")
writeOGR(as(accesibilidad.shp, "SpatialPolygonsDataFrame" ),
accesibilidad.carpeta,
paste(c, "Acceso_Ferias", sep = "_"),
driver = "ESRI Shapefile",overwrite_layer=TRUE)
# Calcular la poblaci?n con acceso y sin acceso
pob.acceso <- accesibilidad.shp@data$Pob[accesibilidad.shp@data$Acceso == "S?"]
pob.total <- accesibilidad.shp@data$Pob
accesibilidad <- data.frame("Ciudad" = c, "Porcentaje Acceso" = round(sum(pob.acceso)/sum(pob.total)*100, 2))
accesibilidad_tabla <- rbind(accesibilidad_tabla, accesibilidad)
}
write.csv(accesibilidad_tabla, "C:/Users/usuario/Documents/Rwork/Accesibilidad/Raw_Data/csv_results/92._Accesibilidad_a_Ferias.csv", row.names = F)
print(consulta.url)
consulta.url <- paste(otp_rest_url, consulta.parametros, sep  = "")
otp_rest_url='http://otp.cedeus.cl/'
consulta.url <- paste(otp_rest_url, consulta.parametros, sep  = "") #Ref:Línea 6
print(consulta.url)
paste(otp_rest_url, consulta.parametros, sep  = "")
